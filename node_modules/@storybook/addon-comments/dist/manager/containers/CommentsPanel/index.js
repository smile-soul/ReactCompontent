'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _addons = require('@storybook/addons');

var _addons2 = _interopRequireDefault(_addons);

var _CommentsPanel = require('../../components/CommentsPanel/');

var _CommentsPanel2 = _interopRequireDefault(_CommentsPanel);

var _dataStore = require('./dataStore');

var _dataStore2 = _interopRequireDefault(_dataStore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Container = function (_Component) {
  (0, _inherits3.default)(Container, _Component);

  function Container(props) {
    var _ref;

    (0, _classCallCheck3.default)(this, Container);

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = Container.__proto__ || (0, _getPrototypeOf2.default)(Container)).call.apply(_ref, [this, props].concat(args)));

    _this.state = {
      user: null,
      comments: [],
      loading: true
    };
    return _this;
  }

  (0, _createClass3.default)(Container, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var db = _addons2.default.getDatabase();
      this.store = new _dataStore2.default(db);
      this.stopListeningToComments = this.store.onComments(function (comments) {
        _this2.setState({ comments: comments });
      });

      // Clear the current notes on every story change.
      this.stopListeningOnStory = this.props.api.onStory(function (kind, story) {
        // set the current selection
        _this2.store.setCurrentStory(kind, story);
      });

      this.stopListingStoreLoading = this.store.onLoading(function (loading) {
        _this2.setState({ loading: loading });
      });

      this.init();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.stopListeningToComments();
      this.stopListeningOnStory();
      this.stopListingStoreLoading();
    }
  }, {
    key: 'getAppInfo',
    value: function getAppInfo(persister) {
      return persister.getAppInfo().then(function (appInfo) {
        return _promise2.default.resolve(appInfo);
      }, function () {
        return _promise2.default.resolve(null);
      });
    }
  }, {
    key: 'init',
    value: function init() {
      var _this3 = this;

      var db = _addons2.default.getDatabase();

      if (typeof db.persister.getUser !== 'function') {
        throw new Error('unable to get user info');
      }

      this.setState({ loading: true });
      db.persister.getUser().then(function (u) {
        return _promise2.default.resolve(u);
      }, function () {
        return _promise2.default.resolve(null);
      }).then(function (user) {
        if (user) {
          _this3.store.setCurrentUser(user);
          _this3.setState({ user: user });
        } else {
          _this3.setState({ user: null });
        }
        return _this3.getAppInfo(db.persister);
      }).then(function (appInfo) {
        var updatedState = { loading: false };
        if (!appInfo) {
          updatedState.appNotAvailable = true;
        }
        _this3.setState(updatedState);
      });
    }
  }, {
    key: 'addComment',
    value: function addComment(text) {
      var time = Date.now();
      var user = this.state.user;


      var comment = {
        text: text,
        time: time,
        userId: user.id
      };

      this.store.addComment(comment);
    }
  }, {
    key: 'deleteComment',
    value: function deleteComment(commentId) {
      this.store.deleteComment(commentId);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var props = {
        user: this.state.user,
        comments: this.state.comments,
        loading: this.state.loading,
        appNotAvailable: this.state.appNotAvailable,
        deleteComment: function deleteComment(commentId) {
          return _this4.deleteComment(commentId);
        },
        addComment: function addComment(text) {
          return _this4.addComment(text);
        }
      };

      return _react2.default.createElement(_CommentsPanel2.default, props);
    }
  }]);
  return Container;
}(_react.Component);

exports.default = Container;


Container.propTypes = {
  api: _propTypes2.default.shape({
    onStory: _propTypes2.default.func.isRequired
  }).isRequired
};