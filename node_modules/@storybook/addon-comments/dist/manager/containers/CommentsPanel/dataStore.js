'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _events = require('events');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DataStore = function () {
  function DataStore(db) {
    (0, _classCallCheck3.default)(this, DataStore);

    this.db = db;
    this.currentStory = null;
    this.callbacks = [];
    this.cache = {};
    this.users = {};
    this.user = null;

    this.eventStore = new _events.EventEmitter();
  }

  (0, _createClass3.default)(DataStore, [{
    key: 'addToCache',
    value: function addToCache(currentStory, comments) {
      var key = this.getStoryKey(currentStory);
      this.cache[key] = {
        comments: comments,
        addedAt: Date.now()
      };
    }
  }, {
    key: 'getFromCache',
    value: function getFromCache(currentStory) {
      var key = this.getStoryKey(currentStory);
      var item = this.cache[key];

      if (!item) {
        return {
          comments: [],
          invalidated: false
        };
      }

      var comments = item.comments;

      var invalidated = false;

      // invalid caches created 60 minutes ago.
      if (Date.now() - item.addedAt > 1000 * 60) {
        delete this.cache[key];
        invalidated = true;
      }

      return { comments: comments, invalidated: invalidated };
    }
  }, {
    key: 'reloadCurrentComments',
    value: function reloadCurrentComments() {
      var _this = this;

      if (this.stopReloading) {
        clearInterval(this.stopReloading);
      }

      this.stopReloading = setInterval(function () {
        _this.loadUsers().then(function () {
          return _this.loadComments();
        });
      }, 1000 * 60 // Reload for every minute
      );
    }
  }, {
    key: 'setCurrentStory',
    value: function setCurrentStory(sbKind, sbStory) {
      var _this2 = this;

      this.currentStory = { sbKind: sbKind, sbStory: sbStory };

      // We don't need to do anything if the there's no loggedIn user.
      // if (!this.user) return;

      this.reloadCurrentComments();
      var item = this.getFromCache(this.currentStory);

      if (item) {
        this.fireComments(item.comments);
        // if the cache invalidated we need to load comments again.
        if (item.invalidated) {
          return this.loadUsers().then(function () {
            return _this2.loadComments();
          });
        }
        return _promise2.default.resolve(null);
      }

      // load comments for the first time.
      // TODO: send a null and handle the loading part in the UI side.
      this.eventStore.emit('loading', true);
      this.fireComments([]);
      this.loadUsers().then(function () {
        return _this2.loadComments();
      }).then(function () {
        _this2.eventStore.emit('loading', false);
        return _promise2.default.resolve(null);
      });

      return this.currentStory;
    }
  }, {
    key: 'setCurrentUser',
    value: function setCurrentUser(user) {
      this.user = user;
    }
  }, {
    key: 'loadUsers',
    value: function loadUsers() {
      var _this3 = this;

      var query = {};
      var options = { limit: 1e6 };
      return this.db.persister.getAppInfo().then(function (info) {
        if (!info) {
          return null;
        }
        return _this3.db.getCollection('users').get(query, options).then(function (users) {
          _this3.users = users.reduce(function (newUsers, user) {
            var usersObj = (0, _extends3.default)({}, newUsers);
            usersObj[user.id] = user;
            return usersObj;
          }, {});
        });
      });
    }
  }, {
    key: 'loadComments',
    value: function loadComments() {
      var _this4 = this;

      var currentStory = (0, _extends3.default)({}, this.currentStory);
      var query = currentStory;
      var options = { limit: 1e6 };
      return this.db.persister.getAppInfo().then(function (info) {
        if (!info) {
          return null;
        }
        return _this4.db.getCollection('comments').get(query, options).then(function (comments) {
          // add to cache
          _this4.addToCache(currentStory, comments);

          // set comments only if we are on the relavant story
          if ((0, _deepEqual2.default)(currentStory, _this4.currentStory)) {
            _this4.fireComments(comments);
          }
        });
      });
    }
  }, {
    key: 'getStoryKey',
    value: function getStoryKey(currentStory) {
      return currentStory.sbKind + ':::' + currentStory.sbStory;
    }
  }, {
    key: 'fireComments',
    value: function fireComments(comments) {
      var _this5 = this;

      this.callbacks.forEach(function (callback) {
        // link user to the comment directly
        var commentsWithUser = comments.map(function (comment) {
          return (0, _assign2.default)({}, comment, { user: _this5.users[comment.userId] });
        });
        callback(commentsWithUser);
      });
    }
  }, {
    key: 'onComments',
    value: function onComments(cb) {
      var _this6 = this;

      this.callbacks.push(cb);
      var stop = function stop() {
        var index = _this6.callbacks.indexOf(cb);
        _this6.callbacks.splice(index, 1);
      };

      return stop;
    }
  }, {
    key: 'addPendingComment',
    value: function addPendingComment(comment) {
      // Add the pending comment.
      var pendingComment = (0, _extends3.default)({}, comment, { loading: true });

      var _getFromCache = this.getFromCache(this.currentStory),
          existingComments = _getFromCache.comments;

      var updatedComments = existingComments.concat(pendingComment);

      this.fireComments(updatedComments);
      return _promise2.default.resolve(null);
    }
  }, {
    key: 'setDeletedComment',
    value: function setDeletedComment(commentId) {
      var _getFromCache2 = this.getFromCache(this.currentStory),
          comments = _getFromCache2.comments;

      var deleted = comments.find(function (c) {
        return c.id === commentId;
      });
      if (deleted) {
        deleted.loading = true;
      }
      this.fireComments(comments);
      return _promise2.default.resolve(null);
    }
  }, {
    key: 'addAuthorToTheDatabase',
    value: function addAuthorToTheDatabase() {
      if (this.users[this.user.id]) {
        // user exists in the DB.
        return _promise2.default.resolve(null);
      }

      // add user to the local cache
      this.users[this.user.id] = this.user;

      // add user to the actual collection
      return this.db.getCollection('users').set(this.user);
    }

    // NOTE the "sbProtected" makes sure only the author can modify
    // or delete a comment after its saved on the cloud database.

  }, {
    key: 'addCommentToDatabase',
    value: function addCommentToDatabase(comment) {
      var doc = (0, _extends3.default)({}, comment, this.currentStory, this.currentStory, {
        sbProtected: true
      });

      return this.db.getCollection('comments').set(doc);
    }
  }, {
    key: 'deleteCommentOnDatabase',
    value: function deleteCommentOnDatabase(commentId) {
      var query = { id: commentId };
      return this.db.getCollection('comments').del(query);
    }
  }, {
    key: 'addComment',
    value: function addComment(comment) {
      var _this7 = this;

      return this.addAuthorToTheDatabase().then(function () {
        return _this7.addPendingComment(comment);
      }).then(function () {
        return _this7.addCommentToDatabase(comment);
      }).then(function () {
        return _this7.loadUsers();
      }).then(function () {
        return _this7.loadComments();
      });
    }
  }, {
    key: 'deleteComment',
    value: function deleteComment(commentId) {
      var _this8 = this;

      return this.setDeletedComment(commentId).then(function () {
        return _this8.deleteCommentOnDatabase(commentId);
      }).then(function () {
        return _this8.loadComments();
      });
    }
  }, {
    key: 'onLoading',
    value: function onLoading(cb) {
      var _this9 = this;

      this.eventStore.on('loading', cb);
      return function () {
        _this9.eventStore.removeListener('loading', cb);
      };
    }
  }]);
  return DataStore;
}();

exports.default = DataStore;